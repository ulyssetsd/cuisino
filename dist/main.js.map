{"version":3,"sources":["../src/main.ts","../src/shared/config.ts","../src/shared/logger.ts","../src/recipes/repository.ts","../src/recipes/recipe.ts","../src/shared/filesystem.ts","../src/extraction/service.ts","../src/extraction/orchestrator.ts","../src/quality/validator.ts","../src/images/processor.ts","../src/analysis/service.ts","../src/app.ts"],"sourcesContent":["#!/usr/bin/env node\n/**\n * Main entry point for Cuisino Recipe Processor\n * Simplified vertical slice architecture\n */\nimport 'dotenv/config';\nimport CuisinoApp from './app.js';\n\nasync function main(): Promise<void> {\n    const app = new CuisinoApp();\n\n    try {\n        await app.run();\n        process.exit(0);\n    } catch (error) {\n        console.error('üí• Application failed:', (error as Error).message);\n        process.exit(1);\n    }\n}\n\n// Handle graceful shutdown\nprocess.on('SIGINT', () => {\n    console.log('\\nüõë Graceful shutdown requested');\n    process.exit(0);\n});\n\n// Handle unhandled rejections\nprocess.on('unhandledRejection', (reason) => {\n    console.error('üí• Unhandled rejection:', reason);\n    process.exit(1);\n});\n\n// Run if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n    main();\n}\n\nexport { main };\n","/**\n * Simplified Configuration Manager\n * Centralized configuration with environment variables\n */\nimport 'dotenv/config';\nimport type {\n    AppConfig,\n    OpenAIConfig,\n    PathsConfig,\n    ProcessingConfig,\n    QualityConfig,\n    ImagesConfig,\n    ImageCompressionConfig,\n} from '../types/index.js';\n\nclass Config implements AppConfig {\n    public readonly openai: OpenAIConfig;\n    public readonly paths: PathsConfig;\n    public readonly processing: ProcessingConfig;\n    public readonly quality: QualityConfig;\n    public readonly images: ImagesConfig;\n\n    constructor() {\n        this.openai = {\n            apiKey: process.env.OPENAI_API_KEY || '',\n            model: process.env.OPENAI_MODEL || 'gpt-4o',\n            maxTokens: parseInt(process.env.MAX_TOKENS || '4000', 10),\n        };\n\n        this.paths = {\n            recipes: process.env.INPUT_DIR || './input',\n            output: process.env.OUTPUT_DIR || './output',\n            temp: './temp',\n        };\n\n        this.processing = {\n            retryAttempts: 3,\n            delayBetweenRequests: 2000,\n            maxConcurrent: 1,\n        };\n\n        this.quality = {\n            autoCorrection: process.env.AUTO_CORRECTION === 'true',\n            validationThreshold: 0.8,\n        };\n\n        const compression: ImageCompressionConfig = {\n            quality: 85,\n            progressive: true,\n            mozjpeg: true,\n        };\n\n        this.images = {\n            compression,\n            maxSize: 2048,\n        };\n    }\n\n    validate(): boolean {\n        if (!this.openai.apiKey) {\n            throw new Error('OPENAI_API_KEY is required');\n        }\n        return true;\n    }\n}\n\nexport default new Config();\n","/**\n * Simplified Logger utility\n * Clean, consistent logging across all domains\n */\nclass Logger {\n    static info(message: string, ...args: any[]): void {\n        console.log(`‚ÑπÔ∏è  ${message}`, ...args);\n    }\n\n    static success(message: string, ...args: any[]): void {\n        console.log(`‚úÖ ${message}`, ...args);\n    }\n\n    static warning(message: string, ...args: any[]): void {\n        console.log(`‚ö†Ô∏è  ${message}`, ...args);\n    }\n\n    static error(message: string, ...args: any[]): void {\n        console.error(`‚ùå ${message}`, ...args);\n    }\n\n    static progress(current: number, total: number, message: string): void {\n        console.log(`üîÑ [${current}/${total}] ${message}`);\n    }\n\n    static section(title: string): void {\n        console.log(`\\nüîπ ${title}`);\n        console.log('‚îÄ'.repeat(50));\n    }\n\n    static result(stats: Record<string, string | number>): void {\n        console.log('\\nüìä Results:');\n        Object.entries(stats).forEach(([key, value]) => {\n            console.log(`   ${key}: ${value}`);\n        });\n    }\n}\n\nexport default Logger;\n\n// Named exports for convenience\nexport const info = Logger.info;\nexport const success = Logger.success;\nexport const warning = Logger.warning;\nexport const error = Logger.error;\nexport const progress = Logger.progress;\nexport const section = Logger.section;\nexport const result = Logger.result;\n","/**\n * Recipe Repository - Simplified data access\n * Handles loading and saving recipes with minimal complexity\n */\nimport { join } from 'path';\nimport { fromImagePaths, fromJson } from './recipe.js';\nimport {\n    listFiles,\n    readJson,\n    writeJson,\n    ensureDir,\n} from '../shared/filesystem.js';\nimport { info, success } from '../shared/logger.js';\nimport type { AppConfig, ImagePair, ProcessingStats } from '../types/index.js';\nimport type Recipe from './recipe.js';\n\nclass RecipeRepository {\n    private readonly config: AppConfig;\n    private readonly recipesPath: string;\n    private readonly outputPath: string;\n\n    constructor(config: AppConfig) {\n        this.config = config;\n        this.recipesPath = config.paths.recipes;\n        this.outputPath = config.paths.output;\n    }\n\n    // Load recipes from image pairs\n    async loadFromImages(): Promise<Recipe[]> {\n        const compressedDir = join(this.recipesPath, 'compressed');\n        const images = await listFiles(compressedDir, '.jpg');\n\n        // Group images into pairs (assuming they come in recto/verso pairs)\n        const pairs = this.groupImagePairs(images, compressedDir);\n\n        info(`Found ${pairs.length} image pairs in ${compressedDir}`);\n\n        return pairs.map((pair, index) =>\n            fromImagePaths(\n                String(index + 1).padStart(3, '0'),\n                pair.recto,\n                pair.verso\n            )\n        );\n    }\n\n    // Load existing recipes from consolidated JSON file\n    async loadExistingRecipes(): Promise<Recipe[]> {\n        const recipes: Recipe[] = [];\n\n        // Load from consolidated file only\n        const consolidatedPath = join(this.outputPath, 'all_recipes.json');\n        const consolidatedData = await readJson<any>(consolidatedPath);\n\n        if (consolidatedData && consolidatedData.recipes) {\n            for (let i = 0; i < consolidatedData.recipes.length; i++) {\n                const data = consolidatedData.recipes[i];\n                // Generate ID from index if not present\n                data.id = data.id || String(i + 1).padStart(3, '0');\n\n                recipes.push(fromJson(data));\n            }\n        }\n\n        info(\n            `Loaded ${recipes.length} existing recipes from consolidated file`\n        );\n        return recipes;\n    }\n\n    // Save single recipe - updates the consolidated file\n    async saveRecipe(recipe: Recipe): Promise<void> {\n        // For individual saves, we update the consolidated file\n        // This is simpler than maintaining individual files\n        const existingRecipes = await this.loadExistingRecipes();\n\n        // Find and update existing recipe or add new one\n        const existingIndex = existingRecipes.findIndex(\n            (r) => r.id === recipe.id\n        );\n        if (existingIndex >= 0) {\n            existingRecipes[existingIndex] = recipe;\n        } else {\n            existingRecipes.push(recipe);\n        }\n\n        await this.saveAllRecipes(existingRecipes);\n    }\n\n    // Save multiple recipes efficiently (batch update)\n    async saveRecipes(recipes: Recipe[]): Promise<void> {\n        await this.saveAllRecipes(recipes);\n    }\n\n    // Save all recipes as consolidated file\n    async saveAllRecipes(\n        recipes: Recipe[],\n        stats: ProcessingStats = {} as ProcessingStats\n    ): Promise<string> {\n        const data = {\n            metadata: {\n                ...stats,\n                totalRecipes: recipes.length,\n                generatedAt: new Date().toISOString(),\n            },\n            recipes: recipes.map((r) => r.toJson()),\n        };\n\n        const filePath = join(this.outputPath, 'all_recipes.json');\n        await writeJson(filePath, data);\n\n        success(\n            `Saved ${recipes.length} recipes to consolidated file: ${filePath}`\n        );\n        return filePath;\n    }\n\n    // Group images into recto/verso pairs\n    groupImagePairs(images: string[], baseDir: string): ImagePair[] {\n        const pairs: ImagePair[] = [];\n        const sortedImages = images.sort();\n\n        for (let i = 0; i < sortedImages.length; i += 2) {\n            if (i + 1 < sortedImages.length) {\n                const rectoImage = sortedImages[i];\n                const versoImage = sortedImages[i + 1];\n                if (rectoImage && versoImage) {\n                    pairs.push({\n                        recto: join(baseDir, rectoImage),\n                        verso: join(baseDir, versoImage),\n                    });\n                }\n            }\n        }\n\n        return pairs;\n    }\n\n    // Ensure output directory exists\n    async ensureDirectories(): Promise<void> {\n        await ensureDir(this.outputPath);\n    }\n}\n\nexport default RecipeRepository;\n","/**\n * Simplified Recipe Entity\n * Core recipe data structure with essential methods\n */\nimport type {\n    RecipeData,\n    RecipeIngredient,\n    NutritionalInfo,\n    RecipeMetadata,\n    ValidationResult,\n} from '../types/index.js';\n\nclass Recipe implements RecipeData {\n    public id: string;\n    public rectoPath?: string;\n    public versoPath?: string;\n\n    // Recipe data\n    public title?: string;\n    public subtitle?: string;\n    public cookingTime?: string;\n    public difficulty?: string;\n    public servings?: string | number;\n    public ingredients: RecipeIngredient[];\n    public instructions: string[];\n    public nutritionalInfo: NutritionalInfo;\n    public allergens: string[];\n    public tips: string[];\n    public tags: string[];\n    public image: string;\n    public source?: string;\n    public metadata: RecipeMetadata;\n\n    // Status tracking\n    public extracted: boolean;\n    public validated: boolean;\n    public extractedAt?: string;\n    public error?: string;\n\n    constructor(id: string, rectoPath?: string, versoPath?: string) {\n        this.id = id;\n        this.rectoPath = rectoPath;\n        this.versoPath = versoPath;\n\n        // Recipe data\n        this.title = undefined;\n        this.subtitle = undefined;\n        this.cookingTime = undefined;\n        this.difficulty = undefined;\n        this.servings = undefined;\n        this.ingredients = [];\n        this.instructions = [];\n        this.nutritionalInfo = {};\n        this.allergens = [];\n        this.tips = [];\n        this.tags = [];\n        this.image = '';\n        this.source = undefined;\n        this.metadata = {};\n\n        // Status tracking\n        this.extracted = false;\n        this.validated = false;\n        this.extractedAt = undefined;\n        this.error = undefined;\n    }\n\n    // Factory method from image paths\n    static fromImagePaths(\n        id: string,\n        rectoPath: string,\n        versoPath: string\n    ): Recipe {\n        return new Recipe(id, rectoPath, versoPath);\n    }\n\n    // Factory method from JSON\n    static fromJson(data: any): Recipe {\n        const recipe = new Recipe(data.id, data.rectoPath, data.versoPath);\n\n        // Handle different JSON formats\n        if (data.steps) {\n            // HelloFresh format from all_recipes.json\n            recipe.title = data.title || 'Unknown Recipe';\n            recipe.subtitle = data.subtitle;\n            recipe.cookingTime = data.duration;\n            recipe.difficulty = data.difficulty;\n            recipe.servings = data.servings;\n            recipe.ingredients = data.ingredients || [];\n            recipe.instructions = data.steps\n                ? data.steps.map((step: any) => step.text)\n                : [];\n            recipe.nutritionalInfo = data.nutrition || {};\n            recipe.allergens = data.allergens || [];\n            recipe.tips = data.tips || [];\n            recipe.tags = data.tags || [];\n            recipe.image = data.image;\n            recipe.source = data.source;\n            recipe.metadata = data.metadata || {};\n            recipe.extracted = true;\n            recipe.validated = false;\n            recipe.extractedAt =\n                data.metadata?.processedAt || new Date().toISOString();\n        } else if (data.title) {\n            // New format or already converted\n            Object.assign(recipe, data);\n        } else {\n            // Legacy format - convert from old structure\n            recipe.title = data.title || 'Unknown Recipe';\n            recipe.cookingTime = data.duration || data.cookingTime;\n            recipe.servings = data.servings;\n            recipe.ingredients = data.ingredients || [];\n            recipe.instructions = data.instructions || [];\n            recipe.nutritionalInfo = data.nutritionalInfo || {};\n            recipe.extracted = true;\n            recipe.validated = false;\n            recipe.extractedAt = new Date().toISOString();\n        }\n\n        return recipe;\n    }\n\n    // Update with extraction data\n    updateFromExtraction(data: any): void {\n        this.title = data.title;\n        this.subtitle = data.subtitle;\n        this.cookingTime = data.cookingTime || data.duration;\n        this.difficulty = data.difficulty;\n        this.servings = data.servings;\n        this.ingredients = data.ingredients || [];\n        this.instructions = data.instructions || [];\n        this.nutritionalInfo = data.nutritionalInfo || data.nutrition || {};\n        this.allergens = data.allergens || [];\n        this.tips = data.tips || [];\n        this.tags = data.tags || [];\n        this.image = data.image || '';\n        this.source = data.source || 'Extracted';\n\n        this.extracted = true;\n        this.extractedAt = new Date().toISOString();\n    }\n\n    // Mark as error\n    setError(error: Error): void {\n        this.error = error.message;\n        this.extracted = false;\n        this.validated = false;\n    }\n\n    // Check if needs extraction\n    needsExtraction(): boolean {\n        return !this.extracted && !this.hasError();\n    }\n\n    // Check if has error\n    hasError(): boolean {\n        return Boolean(this.error);\n    }\n\n    // Basic validation\n    isValid(): ValidationResult {\n        const errors: string[] = [];\n\n        if (!this.title) errors.push('Missing title');\n        if (!this.ingredients || this.ingredients.length === 0)\n            errors.push('Missing ingredients');\n        if (!this.instructions || this.instructions.length === 0)\n            errors.push('Missing instructions');\n\n        return {\n            valid: errors.length === 0,\n            errors,\n        };\n    }\n\n    // Export to JSON (maintaining HelloFresh format)\n    toJson(): any {\n        // Prepare clean metadata without duplication\n        const cleanMetadata = { ...this.metadata };\n\n        // Only add file paths if they don't already exist in originalFiles\n        if (\n            !cleanMetadata.originalFiles &&\n            (this.rectoPath || this.versoPath)\n        ) {\n            cleanMetadata.originalFiles = {\n                recto: this.rectoPath,\n                verso: this.versoPath,\n            };\n        }\n\n        // Remove duplicated properties (prefer originalFiles over rectoPath/versoPath)\n        if (cleanMetadata.originalFiles) {\n            delete cleanMetadata.rectoPath;\n            delete cleanMetadata.versoPath;\n        }\n\n        // Add current status\n        cleanMetadata.extracted = this.extracted;\n        cleanMetadata.validated = this.validated;\n        cleanMetadata.extractedAt = this.extractedAt;\n        cleanMetadata.error = this.error;\n\n        return {\n            id: this.id,\n            title: this.title,\n            subtitle: this.subtitle,\n            duration: this.cookingTime,\n            difficulty: this.difficulty,\n            servings: this.servings,\n            ingredients: this.ingredients,\n            steps: this.instructions.map((instruction) => ({\n                text: instruction,\n            })),\n            nutrition: this.nutritionalInfo,\n            allergens: this.allergens || [],\n            tips: this.tips || [],\n            tags: this.tags || [],\n            image: this.image || '',\n            source: this.source || 'Extracted',\n            metadata: cleanMetadata,\n        };\n    }\n}\n\nexport default Recipe;\nexport const fromImagePaths = Recipe.fromImagePaths;\nexport const fromJson = Recipe.fromJson;\n","/**\n * Simplified File System utilities\n * Common file operations used across domains\n */\nimport fs from 'fs-extra';\nimport { dirname } from 'path';\n\nconst {\n    ensureDir: _ensureDir,\n    pathExists,\n    readJson: _readJson,\n    writeJson: _writeJson,\n    readdir,\n    stat,\n    copy,\n    writeFile,\n} = fs;\n\nclass FileSystem {\n    static async ensureDir(dirPath: string): Promise<void> {\n        await _ensureDir(dirPath);\n    }\n\n    static async readJson<T = any>(filePath: string): Promise<T | null> {\n        if (!(await pathExists(filePath))) {\n            return null;\n        }\n        return await _readJson(filePath);\n    }\n\n    static async writeJson(\n        filePath: string,\n        data: any,\n        pretty = true\n    ): Promise<void> {\n        await this.ensureDir(dirname(filePath));\n        const options = pretty ? { spaces: 2 } : {};\n        await _writeJson(filePath, data, options);\n    }\n\n    static async listFiles(\n        dirPath: string,\n        extension: string | null = null\n    ): Promise<string[]> {\n        if (!(await pathExists(dirPath))) {\n            return [];\n        }\n\n        const files = await readdir(dirPath);\n        if (extension) {\n            return files.filter((file) =>\n                file.toLowerCase().endsWith(extension.toLowerCase())\n            );\n        }\n        return files;\n    }\n\n    static async getFileStats(filePath: string): Promise<fs.Stats | null> {\n        if (!(await pathExists(filePath))) {\n            return null;\n        }\n        return await stat(filePath);\n    }\n\n    static async copyFile(src: string, dest: string): Promise<void> {\n        await this.ensureDir(dirname(dest));\n        await copy(src, dest);\n    }\n\n    static getFileSize(stats: fs.Stats): number {\n        return Math.round(stats.size / 1024); // KB\n    }\n\n    static formatFileSize(bytes: number): string {\n        if (bytes < 1024) return `${bytes}B`;\n        if (bytes < 1024 * 1024) return `${Math.round(bytes / 1024)}KB`;\n        return `${Math.round(bytes / (1024 * 1024))}MB`;\n    }\n\n    static async writeText(filePath: string, content: string): Promise<void> {\n        await this.ensureDir(dirname(filePath));\n        await writeFile(filePath, content, 'utf8');\n    }\n}\n\nexport default FileSystem;\n\n// Named exports for convenience\nexport const listFiles = FileSystem.listFiles;\nexport const readJson = FileSystem.readJson;\nexport const writeJson = FileSystem.writeJson;\nexport const ensureDir = FileSystem.ensureDir;\nexport const getFileStats = FileSystem.getFileStats;\nexport const formatFileSize = FileSystem.formatFileSize;\nexport const writeText = FileSystem.writeText;\n","/**\n * Simplified OpenAI Extraction Service\n * Clean, focused recipe extraction from images\n */\nimport OpenAI from 'openai';\nimport { readFileSync } from 'fs';\nimport { info, success, error as _error } from '../shared/logger.js';\nimport type { AppConfig } from '../types/index.js';\nimport type Recipe from '../recipes/recipe.js';\n\nclass ExtractionService {\n    private readonly config: AppConfig;\n    private readonly openai: OpenAI;\n    private readonly model: string;\n    private readonly maxTokens: number;\n\n    constructor(config: AppConfig) {\n        this.config = config;\n        this.openai = new OpenAI({\n            apiKey: config.openai.apiKey,\n        });\n        this.model = config.openai.model;\n        this.maxTokens = config.openai.maxTokens;\n    }\n\n    // Extract recipe from image pair\n    async extractRecipe(recipe: Recipe): Promise<void> {\n        if (!recipe.rectoPath || !recipe.versoPath) {\n            throw new Error(\n                'Recipe must have both recto and verso image paths'\n            );\n        }\n\n        try {\n            info(`Extracting recipe ${recipe.id}`);\n\n            const images = await this.prepareImages(\n                recipe.rectoPath,\n                recipe.versoPath\n            );\n\n            const completion = await this.openai.chat.completions.create({\n                model: this.model,\n                max_tokens: this.maxTokens,\n                messages: [\n                    {\n                        role: 'system',\n                        content: this.getSystemPrompt(),\n                    },\n                    {\n                        role: 'user',\n                        content: [\n                            {\n                                type: 'text',\n                                text: this.createExtractionPrompt(),\n                            },\n                            ...images as any,\n                        ],\n                    },\n                ],\n            });\n\n            const content = completion.choices[0]?.message?.content;\n            if (!content) {\n                throw new Error('No response from OpenAI');\n            }\n\n            const extractedData = this.parseResponse(content);\n            recipe.updateFromExtraction(extractedData);\n\n            success(`Recipe ${recipe.id} extracted successfully`);\n        } catch (error) {\n            _error(\n                `Failed to extract recipe ${recipe.id}:`,\n                (error as Error).message\n            );\n            recipe.setError(error as Error);\n        }\n    }\n\n    // Prepare images for OpenAI\n    private async prepareImages(\n        rectoPath: string,\n        versoPath: string\n    ): Promise<Array<{ type: 'image_url'; image_url: { url: string; detail: string } }>> {\n        const images = [];\n\n        for (const imagePath of [rectoPath, versoPath]) {\n            const imageBuffer = readFileSync(imagePath);\n            const base64Image = imageBuffer.toString('base64');\n\n            images.push({\n                type: 'image_url' as const,\n                image_url: {\n                    url: `data:image/jpeg;base64,${base64Image}`,\n                    detail: 'high' as const,\n                },\n            });\n        }\n\n        return images;\n    }\n\n    // Create system prompt\n    private getSystemPrompt(): string {\n        return `You are an expert recipe extraction assistant. Your task is to analyze HelloFresh recipe cards and extract structured recipe data.\n\nExtract the following information from the recipe cards:\n- Title and subtitle\n- Cooking time and difficulty\n- Servings\n- Complete ingredients list with quantities\n- Step-by-step instructions\n- Nutritional information (if available)\n- Allergens and dietary tags\n\nAlways respond in valid JSON format. Be precise and comprehensive.`;\n    }\n\n    // Create extraction prompt (now simplified for user message)\n    private createExtractionPrompt(): string {\n        return `Please extract the recipe information from these HelloFresh recipe cards. The first image shows the front of the card, the second shows the back with instructions.\n\nReturn the data in this JSON format:\n{\n  \"title\": \"Recipe Title\",\n  \"subtitle\": \"Recipe Subtitle (if any)\",\n  \"cookingTime\": \"30 min\",\n  \"difficulty\": \"Easy/Medium/Hard\",\n  \"servings\": 2,\n  \"ingredients\": [\n    {\n      \"name\": \"ingredient name\",\n      \"quantity\": \"amount\",\n      \"unit\": \"unit\"\n    }\n  ],\n  \"instructions\": [\n    \"Step 1 instruction\",\n    \"Step 2 instruction\"\n  ],\n  \"nutritionalInfo\": {\n    \"calories\": 500,\n    \"carbs\": \"45g\",\n    \"protein\": \"30g\",\n    \"fat\": \"15g\"\n  },\n  \"allergens\": [\"allergen1\", \"allergen2\"],\n  \"tags\": [\"tag1\", \"tag2\"]\n}`;\n    }\n\n    // Parse OpenAI response\n    private parseResponse(content: string): any {\n        try {\n            // Try to extract JSON from the response\n            const jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n            const jsonStr = jsonMatch ? jsonMatch[0] : content;\n\n            return JSON.parse(jsonStr);\n        } catch (error) {\n            _error('Failed to parse OpenAI response:', content);\n            throw new Error('Invalid JSON response from OpenAI');\n        }\n    }\n\n    // Add delay between requests\n    async delay(): Promise<void> {\n        await new Promise((resolve) =>\n            setTimeout(resolve, this.config.processing.delayBetweenRequests)\n        );\n    }\n}\n\nexport default ExtractionService;\n","/**\n * Extraction Orchestrator\n * Manages the extraction process with retry logic\n */\nimport ExtractionService from './service.js';\nimport {\n    info,\n    section,\n    progress,\n    error as _error,\n    result,\n    warning,\n} from '../shared/logger.js';\nimport type { AppConfig } from '../types/index.js';\nimport type Recipe from '../recipes/recipe.js';\n\nclass ExtractionOrchestrator {\n    private readonly config: AppConfig;\n    private readonly service: ExtractionService;\n    private readonly maxRetries: number;\n\n    constructor(config: AppConfig) {\n        this.config = config;\n        this.service = new ExtractionService(config);\n        this.maxRetries = config.processing.retryAttempts;\n    }\n\n    // Extract all recipes that need extraction\n    async extractRecipes(recipes: Recipe[]): Promise<void> {\n        const toExtract = recipes.filter((recipe) => recipe.needsExtraction());\n\n        if (toExtract.length === 0) {\n            info('No recipes need extraction');\n            return;\n        }\n\n        section(`Extracting ${toExtract.length} recipes`);\n\n        for (let i = 0; i < toExtract.length; i++) {\n            const recipe = toExtract[i];\n            if (!recipe) continue;\n\n            progress(i + 1, toExtract.length, `Processing recipe ${recipe.id}`);\n\n            try {\n                await this.extractWithRetry(recipe);\n\n                // Delay between requests (except for last one)\n                if (i < toExtract.length - 1) {\n                    await this.service.delay();\n                }\n            } catch (error) {\n                _error(\n                    `Failed to extract recipe ${recipe.id} after ${this.maxRetries} attempts`\n                );\n            }\n        }\n\n        const successful = toExtract.filter((r) => r.extracted).length;\n        const failed = toExtract.filter((r) => r.hasError()).length;\n\n        result({\n            'Successful extractions': successful,\n            'Failed extractions': failed,\n            'Success rate': `${Math.round((successful / toExtract.length) * 100)}%`,\n        });\n    }\n\n    // Extract single recipe with retry logic\n    private async extractWithRetry(recipe: Recipe): Promise<void> {\n        let lastError: Error | null = null;\n\n        for (let attempt = 1; attempt <= this.maxRetries; attempt++) {\n            try {\n                if (attempt > 1) {\n                    warning(`Retry attempt ${attempt} for recipe ${recipe.id}`);\n                    await this.service.delay();\n                }\n\n                await this.service.extractRecipe(recipe);\n                return; // Success\n            } catch (error) {\n                lastError = error as Error;\n                if (attempt === this.maxRetries) {\n                    recipe.setError(lastError);\n                    throw lastError;\n                }\n            }\n        }\n    }\n}\n\nexport default ExtractionOrchestrator;\n","/**\n * Simplified Quality Validator\n * Clean validation logic for recipe data\n */\nimport {\n    info,\n    section,\n    success,\n    warning,\n    result as _result,\n} from '../shared/logger.js';\nimport type {\n    AppConfig,\n    QualityValidationResult,\n    RecipeIngredient,\n} from '../types/index.js';\nimport type Recipe from '../recipes/recipe.js';\n\nclass QualityValidator {\n    private readonly config: AppConfig;\n    private readonly threshold: number;\n\n    constructor(config: AppConfig) {\n        this.config = config;\n        this.threshold = config.quality.validationThreshold;\n    }\n\n    // Validate all recipes that need quality check\n    validateRecipes(recipes: Recipe[]): void {\n        const toValidate = recipes.filter(\n            (recipe) =>\n                recipe.extracted && !recipe.validated && !recipe.hasError()\n        );\n\n        if (toValidate.length === 0) {\n            info('No recipes need quality validation');\n            return;\n        }\n\n        section(`Validating ${toValidate.length} recipes`);\n\n        let passed = 0;\n        let failed = 0;\n\n        for (const recipe of toValidate) {\n            const result = this.validateRecipe(recipe);\n\n            if (result.passed) {\n                recipe.validated = true;\n                passed++;\n                success(`Recipe ${recipe.id}: Quality validation passed`);\n            } else {\n                failed++;\n                warning(`Recipe ${recipe.id}: Quality issues found`);\n                result.issues.forEach((issue) => warning(`  - ${issue}`));\n            }\n        }\n\n        _result({\n            'Quality validations passed': passed,\n            'Quality validations failed': failed,\n            'Quality pass rate': `${Math.round((passed / toValidate.length) * 100)}%`,\n        });\n    }\n\n    // Validate single recipe\n    validateRecipe(recipe: Recipe): QualityValidationResult {\n        const issues: string[] = [];\n        let score = 0;\n        const maxScore = 5;\n\n        // Validate title\n        if (this.validateTitle(recipe.title)) {\n            score++;\n        } else {\n            issues.push('Title is missing or too short');\n        }\n\n        // Validate ingredients\n        if (this.validateIngredients(recipe.ingredients)) {\n            score++;\n        } else {\n            issues.push('Ingredients list is incomplete or missing quantities');\n        }\n\n        // Validate instructions\n        if (this.validateInstructions(recipe.instructions)) {\n            score++;\n        } else {\n            issues.push('Instructions are missing or too brief');\n        }\n\n        // Validate cooking time\n        if (this.validateCookingTime(recipe.cookingTime)) {\n            score++;\n        } else {\n            issues.push('Cooking time information is missing or invalid');\n        }\n\n        // Validate servings\n        if (this.validateServings(recipe.servings)) {\n            score++;\n        } else {\n            issues.push('Servings information is missing or invalid');\n        }\n\n        const qualityScore = score / maxScore;\n        const passed = qualityScore >= this.threshold;\n\n        return {\n            passed,\n            score: qualityScore,\n            issues,\n            needsCorrection: !passed && issues.length > 0,\n        };\n    }\n\n    // Validate title\n    private validateTitle(title?: string): boolean {\n        return Boolean(title && title.trim().length >= 3);\n    }\n\n    // Validate ingredients\n    private validateIngredients(ingredients: RecipeIngredient[]): boolean {\n        if (!ingredients || ingredients.length === 0) return false;\n\n        // Check if most ingredients have names and some have quantities\n        const withNames = ingredients.filter((ing) => ing.name?.trim()).length;\n        const withQuantities = ingredients.filter(\n            (ing) => ing.quantity?.trim() || ing.unit?.trim()\n        ).length;\n\n        return (\n            withNames >= ingredients.length * 0.8 && // 80% have names\n            withQuantities >= ingredients.length * 0.5 // 50% have quantities\n        );\n    }\n\n    // Validate instructions\n    private validateInstructions(instructions: string[]): boolean {\n        if (!instructions || instructions.length === 0) return false;\n\n        // Check if instructions are detailed enough\n        const validInstructions = instructions.filter(\n            (instruction) => instruction.trim().length >= 10\n        );\n\n        return (\n            validInstructions.length >= Math.min(instructions.length * 0.8, 3)\n        );\n    }\n\n    // Validate cooking time\n    private validateCookingTime(cookingTime?: string): boolean {\n        if (!cookingTime) return false;\n\n        const timeStr = cookingTime.toString().toLowerCase();\n        return (\n            timeStr.includes('min') ||\n            timeStr.includes('h') ||\n            /\\d+/.test(timeStr)\n        );\n    }\n\n    // Validate servings\n    private validateServings(servings?: string | number): boolean {\n        if (!servings) return false;\n\n        const servingStr = servings.toString().toLowerCase();\n        return (\n            /\\d+/.test(servingStr) ||\n            servingStr.includes('portion') ||\n            servingStr.includes('pers')\n        );\n    }\n}\n\nexport default QualityValidator;\n","/**\n * Simplified Image Processor\n * Clean image optimization and analysis\n */\nimport sharp from 'sharp';\nimport { join } from 'path';\nimport {\n    listFiles,\n    getFileStats,\n    ensureDir,\n    formatFileSize,\n} from '../shared/filesystem.js';\nimport {\n    section,\n    result,\n    progress,\n    error as _error,\n} from '../shared/logger.js';\nimport type {\n    AppConfig,\n    ImagePair,\n    ImageStats,\n    ImageProcessingResult,\n    ImageCompressionConfig,\n} from '../types/index.js';\n\nclass ImageProcessor {\n    private readonly config: AppConfig;\n    private readonly compression: ImageCompressionConfig;\n    private readonly maxSize: number;\n\n    constructor(config: AppConfig) {\n        this.config = config;\n        this.compression = config.images.compression;\n        this.maxSize = config.images.maxSize;\n    }\n\n    // Analyze images in directory\n    async analyzeImages(inputDir: string): Promise<ImageStats> {\n        section('Analyzing images');\n\n        const images = await listFiles(inputDir, '.jpg');\n        const pairs = this.groupImagePairs(images);\n\n        let totalSize = 0;\n        let minSize = Infinity;\n        let maxSize = 0;\n\n        for (const pair of pairs) {\n            const rectoStats = await getFileStats(join(inputDir, pair.recto));\n            const versoStats = await getFileStats(join(inputDir, pair.verso));\n\n            if (rectoStats && versoStats) {\n                totalSize += rectoStats.size + versoStats.size;\n                minSize = Math.min(minSize, rectoStats.size, versoStats.size);\n                maxSize = Math.max(maxSize, rectoStats.size, versoStats.size);\n            }\n        }\n\n        const stats: ImageStats = {\n            totalImages: images.length,\n            imagePairs: pairs.length,\n            totalSizeMB: Math.round(totalSize / (1024 * 1024)),\n            minSizeKB: Math.round(minSize / 1024),\n            maxSizeKB: Math.round(maxSize / 1024),\n            avgSizeKB: Math.round(totalSize / images.length / 1024),\n            estimatedCost: this.estimateProcessingCost(pairs.length),\n        };\n\n        result({\n            'Total Images': stats.totalImages,\n            'Image Pairs': stats.imagePairs,\n            'Total Size (MB)': stats.totalSizeMB,\n            'Average Size (KB)': stats.avgSizeKB,\n            'Estimated Cost': stats.estimatedCost,\n        });\n        return stats;\n    }\n\n    // Optimize images for processing\n    async optimizeImages(\n        inputDir: string,\n        outputDir: string\n    ): Promise<ImageProcessingResult> {\n        section('Optimizing images');\n\n        await ensureDir(outputDir);\n\n        const images = await listFiles(inputDir, '.jpg');\n        let processed = 0;\n        let totalSizeBefore = 0;\n        let totalSizeAfter = 0;\n\n        for (let i = 0; i < images.length; i++) {\n            const filename = images[i];\n            if (!filename) continue;\n            \n            const inputPath = join(inputDir, filename);\n            const outputPath = join(outputDir, filename);\n\n            progress(i + 1, images.length, `Processing ${filename}`);\n\n            try {\n                const beforeStats = await getFileStats(inputPath);\n                if (beforeStats) {\n                    totalSizeBefore += beforeStats.size;\n                }\n\n                await this.processImage(inputPath, outputPath);\n\n                const afterStats = await getFileStats(outputPath);\n                if (afterStats) {\n                    totalSizeAfter += afterStats.size;\n                }\n\n                processed++;\n            } catch (error) {\n                _error(\n                    `Failed to process ${filename}: ${(error as Error).message}`\n                );\n            }\n        }\n\n        const compressionRate = Math.round(\n            (1 - totalSizeAfter / totalSizeBefore) * 100\n        );\n\n        const resultData: ImageProcessingResult = {\n            'Images processed': processed,\n            'Size before': formatFileSize(totalSizeBefore),\n            'Size after': formatFileSize(totalSizeAfter),\n            'Compression rate': `${compressionRate}%`,\n        };\n\n        result(resultData as Record<string, string | number>);\n        return resultData;\n    }\n\n    // Process single image\n    private async processImage(\n        inputPath: string,\n        outputPath: string\n    ): Promise<void> {\n        await sharp(inputPath)\n            .resize(this.maxSize, this.maxSize, {\n                fit: 'inside',\n                withoutEnlargement: true,\n            })\n            .jpeg({\n                quality: this.compression.quality,\n                progressive: this.compression.progressive,\n                mozjpeg: this.compression.mozjpeg,\n            })\n            .toFile(outputPath);\n    }\n\n    // Group images into pairs (assuming sequential naming)\n    private groupImagePairs(images: string[]): ImagePair[] {\n        const pairs: ImagePair[] = [];\n        const sortedImages = images.sort();\n\n        for (let i = 0; i < sortedImages.length; i += 2) {\n            if (i + 1 < sortedImages.length) {\n                const rectoImage = sortedImages[i];\n                const versoImage = sortedImages[i + 1];\n                if (rectoImage && versoImage) {\n                    pairs.push({\n                        recto: rectoImage,\n                        verso: versoImage,\n                    });\n                }\n            }\n        }\n\n        return pairs;\n    }\n\n    // Estimate processing cost\n    private estimateProcessingCost(pairCount: number): number {\n        // Rough estimate: $0.01 per image pair for GPT-4V\n        return Math.round(pairCount * 0.02 * 100) / 100;\n    }\n}\n\nexport default ImageProcessor;\n","/**\n * Simplified Analysis Service\n * Clean reporting and statistics generation\n */\nimport { join } from 'path';\nimport { writeJson, writeText } from '../shared/filesystem.js';\nimport { section, success, result } from '../shared/logger.js';\nimport type {\n    AppConfig,\n    AnalysisStats,\n    AnalysisReport,\n    RecipeIngredient,\n} from '../types/index.js';\nimport type Recipe from '../recipes/recipe.js';\n\nclass AnalysisService {\n    private readonly config: AppConfig;\n    private readonly outputPath: string;\n\n    constructor(config: AppConfig) {\n        this.config = config;\n        this.outputPath = config.paths.output;\n    }\n\n    // Generate comprehensive report\n    async generateReport(recipes: Recipe[]): Promise<AnalysisReport> {\n        section('Generating analysis report');\n\n        const stats = this.calculateStatistics(recipes);\n        const report = this.buildReport(stats);\n\n        // Save JSON report\n        const jsonPath = join(this.outputPath, 'analysis_report.json');\n        await writeJson(jsonPath, report);\n\n        // Save Markdown report\n        const markdownPath = join(this.outputPath, 'analysis_report.md');\n        const markdown = this.generateMarkdown(report);\n        await writeText(markdownPath, markdown);\n\n        success(`Analysis report saved to ${jsonPath} and ${markdownPath}`);\n        this.logSummary(stats);\n\n        return report;\n    }\n\n    // Calculate statistics from recipes\n    calculateStatistics(recipes: Recipe[]): AnalysisStats {\n        const total = recipes.length;\n        const extracted = recipes.filter((r) => r.extracted).length;\n        const validated = recipes.filter((r) => r.validated).length;\n        const withErrors = recipes.filter((r) => r.hasError()).length;\n\n        // Ingredient analysis\n        const allIngredients = recipes\n            .filter((r) => r.ingredients)\n            .flatMap((r) => r.ingredients)\n            .filter((i): i is RecipeIngredient => Boolean(i && i.name));\n\n        const ingredientCounts = this.countOccurrences(\n            allIngredients.map((i) => i.name.toLowerCase())\n        );\n        const avgIngredientsPerRecipe =\n            allIngredients.length / Math.max(extracted, 1);\n\n        // Cooking time analysis\n        const cookingTimes = recipes\n            .filter((r) => r.cookingTime)\n            .map((r) => this.extractMinutes(r.cookingTime!))\n            .filter((t) => t > 0);\n\n        const avgCookingTime =\n            cookingTimes.length > 0\n                ? Math.round(\n                      cookingTimes.reduce((a, b) => a + b, 0) /\n                          cookingTimes.length\n                  )\n                : 0;\n\n        // Quality analysis\n        const qualityIssues = recipes.filter(\n            (r) => r.extracted && !r.validated\n        ).length;\n\n        return {\n            total,\n            extracted,\n            validated,\n            withErrors,\n            successRate: Math.round((extracted / total) * 100),\n            qualityRate: Math.round((validated / Math.max(extracted, 1)) * 100),\n            avgIngredientsPerRecipe:\n                Math.round(avgIngredientsPerRecipe * 10) / 10,\n            avgCookingTime,\n            qualityIssues,\n            topIngredients: Object.entries(ingredientCounts)\n                .sort(([, a], [, b]) => b - a)\n                .slice(0, 10)\n                .map(([name, count]) => ({ name, count })),\n            errors: recipes\n                .filter((r) => r.hasError())\n                .map((r) => ({\n                    id: r.id,\n                    error: r.error!,\n                    timestamp: r.extractedAt,\n                })),\n        };\n    }\n\n    // Build structured report\n    private buildReport(stats: AnalysisStats): AnalysisReport {\n        return {\n            metadata: {\n                generatedAt: new Date().toISOString(),\n                version: '1.0.0',\n            },\n            summary: {\n                totalRecipes: stats.total,\n                successfulExtractions: stats.extracted,\n                validatedRecipes: stats.validated,\n                failedExtractions: stats.withErrors,\n                successRate: `${stats.successRate}%`,\n                qualityRate: `${stats.qualityRate}%`,\n            },\n            insights: {\n                averageIngredientsPerRecipe: stats.avgIngredientsPerRecipe,\n                averageCookingTimeMinutes: stats.avgCookingTime,\n                qualityIssuesCount: stats.qualityIssues,\n                topIngredients: stats.topIngredients,\n            },\n            issues: {\n                extractionErrors: stats.errors,\n                qualityIssuesCount: stats.qualityIssues,\n            },\n        };\n    }\n\n    // Generate Markdown report\n    private generateMarkdown(report: AnalysisReport): string {\n        return `# Recipe Analysis Report\n\nGenerated on: ${new Date(report.metadata.generatedAt).toLocaleString()}\n\n## Summary\n\n- **Total Recipes**: ${report.summary.totalRecipes}\n- **Successful Extractions**: ${report.summary.successfulExtractions}\n- **Validated Recipes**: ${report.summary.validatedRecipes}\n- **Failed Extractions**: ${report.summary.failedExtractions}\n- **Success Rate**: ${report.summary.successRate}\n- **Quality Rate**: ${report.summary.qualityRate}\n\n## Insights\n\n### Recipe Characteristics\n- **Average Ingredients per Recipe**: ${report.insights.averageIngredientsPerRecipe}\n- **Average Cooking Time**: ${report.insights.averageCookingTimeMinutes} minutes\n- **Quality Issues**: ${report.insights.qualityIssuesCount}\n\n### Top Ingredients\n${report.insights.topIngredients.map((ing) => `- ${ing.name}: ${ing.count} recipes`).join('\\n')}\n\n## Issues\n\n### Extraction Errors\n${\n    report.issues.extractionErrors.length > 0\n        ? report.issues.extractionErrors\n              .map((err) => `- Recipe ${err.id}: ${err.error}`)\n              .join('\\n')\n        : '- No extraction errors'\n}\n\n### Quality Issues\n- **Recipes with quality issues**: ${report.issues.qualityIssuesCount}\n\n---\n*Report generated by Cuisino Recipe Processor*`;\n    }\n\n    // Count occurrences in array\n    private countOccurrences(items: string[]): Record<string, number> {\n        const counts: Record<string, number> = {};\n\n        for (const item of items) {\n            counts[item] = (counts[item] || 0) + 1;\n        }\n\n        return counts;\n    }\n\n    // Extract minutes from cooking time string\n    private extractMinutes(timeStr: string): number {\n        const match = timeStr.match(/(\\d+)/);\n        if (!match || !match[1]) return 0;\n\n        const value = parseInt(match[1], 10);\n\n        if (timeStr.toLowerCase().includes('h')) {\n            return value * 60;\n        }\n\n        return value; // Assume minutes\n    }\n\n    // Log summary to console\n    private logSummary(stats: AnalysisStats): void {\n        result({\n            'Total recipes': stats.total,\n            'Successful extractions': stats.extracted,\n            'Validation rate': `${stats.qualityRate}%`,\n            'Average cooking time': `${stats.avgCookingTime} min`,\n            'Average ingredients': stats.avgIngredientsPerRecipe,\n        });\n    }\n}\n\nexport default AnalysisService;\n","/**\n * Main Application Orchestrator\n * Simplified main entry point that coordinates all domains\n */\nimport config from './shared/config.js';\nimport Logger from './shared/logger.js';\n\n// Domain services\nimport RecipeRepository from './recipes/repository.js';\nimport ExtractionOrchestrator from './extraction/orchestrator.js';\nimport QualityValidator from './quality/validator.js';\nimport ImageProcessor from './images/processor.js';\nimport AnalysisService from './analysis/service.js';\n\nimport type {\n    ProcessingStats,\n    ImageStats,\n    ImageProcessingResult,\n} from './types/index.js';\nimport type Recipe from './recipes/recipe.js';\n\nclass CuisinoApp {\n    private readonly recipeRepo: RecipeRepository;\n    private readonly extractor: ExtractionOrchestrator;\n    private readonly qualityValidator: QualityValidator;\n    private readonly imageProcessor: ImageProcessor;\n    private readonly analysisService: AnalysisService;\n\n    constructor() {\n        // Validate configuration\n        config.validate();\n\n        // Initialize domain services\n        this.recipeRepo = new RecipeRepository(config);\n        this.extractor = new ExtractionOrchestrator(config);\n        this.qualityValidator = new QualityValidator(config);\n        this.imageProcessor = new ImageProcessor(config);\n        this.analysisService = new AnalysisService(config);\n    }\n\n    // Main processing pipeline\n    async run(): Promise<void> {\n        try {\n            Logger.section('üç≥ Cuisino Recipe Processor');\n            const startTime = Date.now();\n\n            // Setup\n            await this.recipeRepo.ensureDirectories();\n\n            // Load recipes (from images and existing data)\n            const recipes = await this.loadRecipes();\n\n            if (recipes.length === 0) {\n                Logger.warning('No recipes found to process');\n                return;\n            }\n\n            // Extract recipes from images\n            await this.extractor.extractRecipes(recipes);\n\n            // Validate data quality\n            this.qualityValidator.validateRecipes(recipes);\n\n            // Save all results\n            await this.saveResults(recipes);\n\n            // Generate analysis report\n            await this.analysisService.generateReport(recipes);\n\n            // Final summary\n            const duration = Math.round((Date.now() - startTime) / 1000);\n            Logger.section(`‚ú® Processing completed in ${duration}s`);\n        } catch (error) {\n            Logger.error('Application failed:', (error as Error).message);\n            throw error;\n        }\n    }\n\n    // Analyze images only (no processing)\n    async analyzeImages(): Promise<ImageStats> {\n        Logger.section('üîç Image Analysis Mode');\n\n        const inputDir = config.paths.recipes + '/compressed';\n        return await this.imageProcessor.analyzeImages(inputDir);\n    }\n\n    // Optimize images only\n    async optimizeImages(): Promise<ImageProcessingResult> {\n        Logger.section('üé® Image Optimization Mode');\n\n        const inputDir = config.paths.recipes + '/uncompressed';\n        const outputDir = config.paths.recipes + '/compressed';\n\n        return await this.imageProcessor.optimizeImages(inputDir, outputDir);\n    }\n\n    // Load recipes from various sources\n    private async loadRecipes(): Promise<Recipe[]> {\n        Logger.section('Loading recipes');\n\n        // Try to load existing recipes first\n        let recipes = await this.recipeRepo.loadExistingRecipes();\n\n        // If no existing recipes, load from images\n        if (recipes.length === 0) {\n            recipes = await this.recipeRepo.loadFromImages();\n        }\n\n        Logger.info(`Loaded ${recipes.length} recipes total`);\n        return recipes;\n    }\n\n    // Save all results\n    private async saveResults(recipes: Recipe[]): Promise<void> {\n        Logger.section('Saving results');\n\n        // Save individual recipes\n        for (const recipe of recipes) {\n            if (recipe.extracted || recipe.hasError()) {\n                await this.recipeRepo.saveRecipe(recipe);\n            }\n        }\n\n        // Save consolidated file\n        const stats = this.calculateStats(recipes);\n        await this.recipeRepo.saveAllRecipes(recipes, stats);\n\n        Logger.success('All results saved successfully');\n    }\n\n    // Calculate processing statistics\n    private calculateStats(recipes: Recipe[]): ProcessingStats {\n        const extracted = recipes.filter((r) => r.extracted).length;\n        const validated = recipes.filter((r) => r.validated).length;\n        const errors = recipes.filter((r) => r.hasError()).length;\n\n        return {\n            totalRecipes: recipes.length,\n            extractedRecipes: extracted,\n            validatedRecipes: validated,\n            errorCount: errors,\n            successRate: `${Math.round((extracted / recipes.length) * 100)}%`,\n            qualityRate: `${Math.round((validated / Math.max(extracted, 1)) * 100)}%`,\n        };\n    }\n}\n\nexport default CuisinoApp;\n"],"mappings":"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","names":["error","error","error","result","join","join","error","join","join","service_default","service_default","error","error"]}