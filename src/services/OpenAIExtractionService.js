/**
 * OpenAIExtractionService - Service d'extraction via OpenAI
 * Responsabilit√©: Extraire les donn√©es de recettes depuis les images
 */
const path = require('path');
const ImageProcessor = require('../ImageProcessor');

class OpenAIExtractionService {
    constructor(openaiClient, config) {
        this.openai = openaiClient;
        this.config = config;
        this.imageProcessor = new ImageProcessor();
    }

    /**
     * Extrait une recette depuis les images et met √† jour l'objet Recipe
     */
    async extractRecipe(recipe) {
        if (!recipe.hasImagePaths()) {
            throw new Error('Recipe n\'a pas de chemins d\'images pour l\'extraction');
        }

        const { recto, verso } = recipe.getImagePaths();
        
        console.log(`   üîÑ Extraction pour "${recipe.title}"`);
        console.log(`   üì∏ Images: ${path.basename(recto)} / ${path.basename(verso)}`);

        try {
            // Convertir les images en base64
            console.log('   üîÑ Conversion des images en base64...');
            const rectoBase64 = await this.imageProcessor.imageToBase64(recto);
            const versoBase64 = await this.imageProcessor.imageToBase64(verso);

            // Appeler l'API OpenAI
            console.log('   ü§ñ Envoi √† l\'API OpenAI...');
            const response = await this.openai.chat.completions.create({
                model: this.config.model,
                max_tokens: this.config.maxTokens,
                messages: [
                    {
                        role: "system",
                        content: this.getSystemPrompt()
                    },
                    {
                        role: "user",
                        content: [
                            {
                                type: "text",
                                text: "Voici une fiche de recette HelloFresh en deux parties. La premi√®re image est le RECTO (titre, image, ingr√©dients) et la seconde est le VERSO (instructions, quantit√©s, nutrition). Extrait toutes les informations selon le sch√©ma JSON demand√©."
                            },
                            {
                                type: "image_url",
                                image_url: {
                                    url: rectoBase64,
                                    detail: "high"
                                }
                            },
                            {
                                type: "image_url",
                                image_url: {
                                    url: versoBase64,
                                    detail: "high"
                                }
                            }
                        ]
                    }
                ]
            });

            const content = response.choices[0]?.message?.content;
            if (!content) {
                throw new Error('R√©ponse vide de l\'API OpenAI');
            }

            // Parser la r√©ponse et mettre √† jour la recette
            const extractedData = this.parseResponse(content);
            recipe.applyExtractedData(extractedData);

            console.log(`   ‚úÖ Extraction r√©ussie: "${recipe.title}"`);
            return recipe;

        } catch (error) {
            console.error(`   ‚ùå Erreur d'extraction: ${error.message}`);
            recipe.markExtractionError(error);
            throw error;
        }
    }

    /**
     * Parse la r√©ponse JSON de l'API OpenAI
     */
    parseResponse(content) {
        try {
            // Nettoyer la r√©ponse pour extraire uniquement le JSON
            let jsonStr = content.trim();
            
            // Supprimer les balises markdown si pr√©sentes
            jsonStr = jsonStr.replace(/```json\s*/, '').replace(/```\s*$/, '');
            
            // Parser le JSON
            const data = JSON.parse(jsonStr);
            
            // Validation basique
            if (!data.title) {
                throw new Error('Titre manquant dans la recette extraite');
            }
            
            // Assurer que certains champs sont pr√©sents avec des valeurs par d√©faut
            return {
                title: data.title,
                subtitle: data.subtitle || '',
                duration: data.duration || '',
                difficulty: data.difficulty || null,
                servings: data.servings || null,
                ingredients: data.ingredients || [],
                allergens: data.allergens || [],
                steps: data.steps || [],
                nutrition: data.nutrition || {},
                tips: data.tips || [],
                tags: data.tags || [],
                image: data.image || '',
                source: data.source || 'HelloFresh'
            };
            
        } catch (error) {
            console.error('   ‚ùå Erreur lors du parsing JSON:', error.message);
            console.error('   üìÑ Contenu re√ßu:', content);
            throw new Error(`Impossible de parser la r√©ponse JSON: ${error.message}`);
        }
    }

    /**
     * G√©n√®re le prompt syst√®me pour l'extraction
     */
    getSystemPrompt() {
        return `Tu es un expert en extraction de donn√©es de recettes √† partir d'images. Tu dois analyser des fiches de recettes HelloFresh et extraire toutes les informations dans un format JSON structur√©.

SCH√âMA JSON REQUIS:
{
  "title": "...",
  "subtitle": "...",
  "duration": "...",
  "difficulty": 2,
  "servings": 2,
  "ingredients": [
    { "name": "...", "quantity": { "value": ..., "unit": "..." } }
  ],
  "allergens": ["..."],
  "steps": [
    { "text": "..." }
  ],
  "nutrition": {
    "calories": "...",
    "lipides": "...",
    "acides_gras_satures": "...",
    "glucides": "...",
    "sucres": "...",
    "fibres": "...",
    "proteines": "...",
    "sel": "..."
  },
  "tips": ["..."],
  "tags": ["..."],
  "source": "HelloFresh"
}

INSTRUCTIONS SP√âCIFIQUES:

1. **Ingr√©dients**: S√©pare bien la quantit√© en "value" (nombre) et "unit" (texte).

3. **Difficult√©**: Utilise une √©chelle de 1 √† 5 (1 = tr√®s facile, 5 = tr√®s difficile).

4. **Nutrition**: Extrait toutes les valeurs nutritionnelles visibles. Si une valeur n'est pas disponible, mets une cha√Æne vide "".

5. **Allerg√®nes**: Liste tous les allerg√®nes mentionn√©s.

6. **Tags**: Identifie le type de plat, cuisine, r√©gime alimentaire, etc.

7. **Conseils**: Extrait tous les conseils, astuces ou remarques particuli√®res.

R√âPONSE: Fournis uniquement le JSON valide, sans texte d'explication avant ou apr√®s.`;
    }
}

module.exports = OpenAIExtractionService;
