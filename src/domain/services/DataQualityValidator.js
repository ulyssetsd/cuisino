
/**
 * Classe responsable uniquement de la VALIDATION des donn√©es de qualit√©
 * La correction est maintenant s√©par√©e dans DataQualityCorrector pour √©viter les appels API inutiles
 */
class DataQualityValidator {
    constructor(config = null) {
        this.config = config;
        // Unit√©s standards (format court) - pour une base de donn√©es coh√©rente
        this.standardUnits = [
            '', 'g', 'kg', 'ml', 'cl', 'l', 'dl',
            'cs', 'cc', 'pi√®ce', 'gousse', 'sachet', 'bo√Æte',
            'tranche', 'tige', 'botte', 'cube', 'cm'
        ];
        
        // Mapping des variantes vers les unit√©s standard
        this.unitNormalization = {
            // Cuill√®res - tout vers cs/cc
            'cuill√®re √† soupe': 'cs',
            'cuill√®res √† soupe': 'cs',
            'c. √† soupe': 'cs',
            'cuill√®re': 'cs',
            
            'cuill√®re √† caf√©': 'cc',
            'cuill√®res √† caf√©': 'cc',
            'c. √† caf√©': 'cc',
            
            // Pi√®ces - tout vers pi√®ce (singulier)
            'pi√®ces': 'pi√®ce',
            'piece': 'pi√®ce',
            'pieces': 'pi√®ce',
            'pc': 'pi√®ce',
            'pcs': 'pi√®ce',
            'unit√©': 'pi√®ce',
            'unit√©s': 'pi√®ce',
            
            // Containers - formes courtes
            'sachets': 'sachet',
            'conserve': 'bo√Æte',
            'pot': 'bo√Æte',
            'pots': 'bo√Æte',
            'flacon': 'bo√Æte',
            'barquette': 'bo√Æte',
            'paquet': 'sachet',
            'paquets': 'sachet',
            
            // V√©g√©taux - singulier
            'gousses': 'gousse',
            'tiges': 'tige',
            'bottes': 'botte',
            'tranches': 'tranche',
            'branches': 'tige',
            'branche': 'tige',
            'feuilles': 'tige',
            'feuille': 'tige',
            
            // Anciens formats
            'pi√®ce(s)': 'pi√®ce',
            'sachet(s)': 'sachet',
            
            // Dosage variable - on garde tel quel
            '√† doser': '√† doser',
            '√† r√¢per': '√† r√¢per',
            'selon votre go√ªt': ''
        };    }

    /**
     * Valide la qualit√© des donn√©es d'une recette extraite
     * @param {Object} recipe - La recette √† valider
     * @returns {Object} - R√©sultat de la validation avec recipe normalis√©e et issues d√©tect√©es
     */
    validateRecipe(recipe) {
        // V√©rifier si la validation est activ√©e
        if (!this.config?.dataQuality?.enabled || !this.config?.dataQuality?.validateIngredients) {
            return {
                normalizedRecipe: recipe,
                issues: [],
                needsCorrection: false
            };
        }

        console.log('   üîç V√©rification de la qualit√© des donn√©es...');
        
        // √âtape 1: Normalisation automatique des unit√©s
        const normalizedRecipe = this.normalizeRecipeUnits(recipe);
        
        // √âtape 2: D√©tection des probl√®mes restants
        const issues = this.detectDataQualityIssues(normalizedRecipe);
        
        const needsCorrection = issues.length > 0;
        
        if (!needsCorrection) {
            console.log('   ‚úÖ Donn√©es de qualit√© - aucune correction n√©cessaire');
        } else {
            console.log(`   ‚ö†Ô∏è  ${issues.length} probl√®me(s) de qualit√© d√©tect√©(s)`);
        }

        return {
            normalizedRecipe,
            issues,
            needsCorrection
        };
    }

    /**
     * Normalise automatiquement les unit√©s d'une recette
     * @param {Object} recipe - La recette √† normaliser
     * @returns {Object} - La recette avec unit√©s normalis√©es
     */
    normalizeRecipeUnits(recipe) {
        if (!recipe.ingredients || !Array.isArray(recipe.ingredients)) {
            return recipe;
        }

        let normalizedCount = 0;
        const normalizedIngredients = recipe.ingredients.map(ingredient => {
            if (!ingredient.quantity || !ingredient.quantity.unit) {
                return ingredient;
            }

            const currentUnit = ingredient.quantity.unit;
            const normalizedUnit = this.normalizeUnit(currentUnit);
            
            if (currentUnit !== normalizedUnit) {
                normalizedCount++;
                console.log(`   üìù Normalisation: "${currentUnit}" ‚Üí "${normalizedUnit}"`);
                
                return {
                    ...ingredient,
                    quantity: {
                        ...ingredient.quantity,
                        unit: normalizedUnit
                    }
                };
            }
            
            return ingredient;
        });

        if (normalizedCount > 0) {
            console.log(`   ‚ú® ${normalizedCount} unit√©(s) normalis√©e(s)`);
        }

        return {
            ...recipe,
            ingredients: normalizedIngredients
        };
    }

    /**
     * D√©tecte les probl√®mes de qualit√© dans les ingr√©dients
     * @param {Object} recipe - La recette √† analyser
     * @returns {Array} - Liste des probl√®mes d√©tect√©s
     */
    detectDataQualityIssues(recipe) {
        const issues = [];
        
        if (!recipe.ingredients || !Array.isArray(recipe.ingredients)) {
            return issues;
        }

        recipe.ingredients.forEach((ingredient, index) => {
            const problems = [];
            
            // V√©rifier le nom
            if (!ingredient.name || typeof ingredient.name !== 'string' || ingredient.name.trim() === '') {
                problems.push('nom manquant ou vide');
            }
            
            // V√©rifier la quantit√©
            if (!ingredient.quantity || typeof ingredient.quantity !== 'object') {
                problems.push('objet quantity manquant');
            } else {
                const { value, unit } = ingredient.quantity;
                
                // V√©rifier la valeur (doit √™tre un nombre ou null)
                if (value !== null && (typeof value !== 'number' || isNaN(value))) {
                    problems.push('valeur quantity.value invalide (doit √™tre un nombre ou null)');
                }
                
                // V√©rifier l'unit√©
                if (unit === undefined || unit === null) {
                    problems.push('quantity.unit manquant');
                } else if (typeof unit !== 'string') {
                    problems.push('quantity.unit doit √™tre une cha√Æne');
                } else if (!this.isValidUnit(unit)) {
                    problems.push(`quantity.unit "${unit}" non standard`);
                }
                
                // Cas particulier: valeur null mais unit√© renseign√©e = donn√©es incompl√®tes
                if (value === null && unit && unit !== '') {
                    problems.push('valeur quantity.value manquante alors que l\'unit√© est renseign√©e');
                }
            }
            
            if (problems.length > 0) {
                issues.push({
                    index,
                    ingredient,
                    problems
                });
            }
        });        
        return issues;
    }

    /**
     * Normalise une unit√© vers son format standard
     * @param {string} unit - L'unit√© √† normaliser
     * @returns {string} - L'unit√© normalis√©e
     */
    normalizeUnit(unit) {
        if (!unit || typeof unit !== 'string') {
            return '';
        }
        
        const trimmedUnit = unit.trim();
        
        // V√©rifier si l'unit√© est dans la mapping de normalisation
        if (this.unitNormalization[trimmedUnit]) {
            return this.unitNormalization[trimmedUnit];
        }
        
        // Si d√©j√† dans les unit√©s standard, la retourner telle quelle
        if (this.standardUnits.includes(trimmedUnit)) {
            return trimmedUnit;
        }
        
        // Sinon, retourner l'unit√© telle quelle (sera marqu√©e comme non standard)
        return trimmedUnit;
    }

    /**
     * V√©rifie si une unit√© est valide (standard ou normalisable)
     */
    isValidUnit(unit) {
        if (!unit || typeof unit !== 'string') {
            return false;
        }
        
        const normalizedUnit = this.normalizeUnit(unit);
        return this.standardUnits.includes(normalizedUnit);
    }
}

module.exports = DataQualityValidator;
