const ImageProcessor = require('./infrastructure/external/ImageProcessor');

class RecipeExtractor {
    constructor(openaiClient, openaiConfig) {
        this.openai = openaiClient;
        this.imageProcessor = new ImageProcessor();
        this.model = openaiConfig.model;
        this.maxTokens = openaiConfig.maxTokens;
    }

    async extractRecipe(rectoPath, versoPath) {
        console.log('   üîÑ Conversion des images en base64...');

        // Convertir les images en base64
        const rectoBase64 = await this.imageProcessor.imageToBase64(rectoPath);
        const versoBase64 = await this.imageProcessor.imageToBase64(versoPath);
        
        console.log('   ü§ñ Envoi √† l\'API OpenAI...');
        
        const response = await this.openai.chat.completions.create({
            model: this.model,
            max_tokens: this.maxTokens,
            messages: [
                {
                    role: "system",
                    content: this.getSystemPrompt()
                },
                {
                    role: "user",
                    content: [
                        {
                            type: "text",
                            text: "Voici une fiche de recette HelloFresh en deux parties. La premi√®re image est le RECTO (titre, image, ingr√©dients) et la seconde est le VERSO (instructions, quantit√©s, nutrition). Extrait toutes les informations selon le sch√©ma JSON demand√©."
                        },
                        {
                            type: "image_url",
                            image_url: {
                                url: rectoBase64,
                                detail: "high"
                            }
                        },
                        {
                            type: "image_url",
                            image_url: {
                                url: versoBase64,
                                detail: "high"
                                }
                            }
                        ]
                    }
                ]
            });
            
            const content = response.choices[0]?.message?.content;
            if (!content) {
                throw new Error('R√©ponse vide de l\'API OpenAI');
            }
              // Extraire le JSON de la r√©ponse
            let recipe = this.parseRecipeFromResponse(content);
            
            // V√©rification de la qualit√© des donn√©es (sans correction)
            const validationResult = this.dataQualityValidator.validateRecipe(recipe);
            recipe = validationResult.normalizedRecipe;
            
            // Si des probl√®mes sont d√©tect√©s ET que l'auto-correction est activ√©e
            if (validationResult.needsCorrection && this.config?.dataQuality?.autoCorrection) {
                console.log('   üîß Correction automatique des probl√®mes d√©tect√©s...');
                try {
                    recipe = await this.dataQualityCorrector.correctRecipeData(
                        recipe, 
                        validationResult.issues, 
                        rectoPath, 
                        versoPath
                    );
                    console.log('   ‚úÖ Donn√©es corrig√©es avec succ√®s');
                } catch (error) {
                    console.log(`   ‚ö†Ô∏è  √âchec de la correction: ${error.message}`);
                    console.log('   üìù Conservation des donn√©es normalis√©es');
                    // On garde la recette normalis√©e m√™me si la correction √©choue
                }
            } else if (validationResult.needsCorrection) {
                console.log('   ‚ö†Ô∏è  Probl√®mes d√©tect√©s mais auto-correction d√©sactiv√©e');
            }
            
            console.log(`   ‚úÖ Recette extraite: "${recipe.title}"`);
            return recipe;
            
        } catch (error) {
            console.error('   ‚ùå Erreur API OpenAI:', error.message);
            throw error;
        }
    }
    
    getSystemPrompt() {
        return `Tu es un expert en extraction de donn√©es de recettes √† partir d'images. Tu dois analyser des fiches de recettes HelloFresh et extraire toutes les informations dans un format JSON structur√©.

SCH√âMA JSON REQUIS:
{
  "title": "...",
  "subtitle": "...",
  "duration": "...",
  "difficulty": 2,
  "servings": 2,
  "ingredients": [
    { "name": "...", "quantity": { "value": ..., "unit": "..." } }
  ],
  "allergens": ["..."],
  "steps": [
    { "text": "..." }
  ],
  "nutrition": {
    "calories": "...",
    "lipides": "...",
    "acides_gras_satures": "...",
    "glucides": "...",
    "sucres": "...",
    "fibres": "...",
    "proteines": "...",
    "sel": "..."
  },
  "tips": ["..."],
  "tags": ["..."],
  "source": "HelloFresh"
}

INSTRUCTIONS SP√âCIFIQUES:

1. **Ingr√©dients**: S√©pare bien la quantit√© en "value" (nombre) et "unit" (texte).

3. **Difficult√©**: Utilise une √©chelle de 1 √† 5 (1 = tr√®s facile, 5 = tr√®s difficile).

4. **Nutrition**: Extrait toutes les valeurs nutritionnelles visibles. Si une valeur n'est pas disponible, mets une cha√Æne vide "".

5. **Allerg√®nes**: Liste tous les allerg√®nes mentionn√©s.

6. **Tags**: Identifie le type de plat, cuisine, r√©gime alimentaire, etc.

7. **Conseils**: Extrait tous les conseils, astuces ou remarques particuli√®res.

R√âPONSE: Fournis uniquement le JSON valide, sans texte d'explication avant ou apr√®s.`;
    }
    
    parseRecipeFromResponse(content) {
        try {
            // Nettoyer la r√©ponse pour extraire uniquement le JSON
            let jsonStr = content.trim();
            
            // Supprimer les balises markdown si pr√©sentes
            jsonStr = jsonStr.replace(/```json\s*/, '').replace(/```\s*$/, '');
            
            // Parser le JSON
            const recipe = JSON.parse(jsonStr);
            
            // Validation basique
            if (!recipe.title) {
                throw new Error('Titre manquant dans la recette extraite');
            }
            
            // Assurer que certains champs sont pr√©sents avec des valeurs par d√©faut
            recipe.source = recipe.source || "HelloFresh";
            recipe.ingredients = recipe.ingredients || [];
            recipe.steps = recipe.steps || [];
            recipe.nutrition = recipe.nutrition || {};
            recipe.allergens = recipe.allergens || [];
            recipe.tips = recipe.tips || [];
            recipe.tags = recipe.tags || [];
            
            return recipe;
            
        } catch (error) {
            console.error('   ‚ùå Erreur lors du parsing JSON:', error.message);
            console.error('   üìÑ Contenu re√ßu:', content);
            throw new Error(`Impossible de parser la r√©ponse JSON: ${error.message}`);
        }
    }
}

module.exports = RecipeExtractor;
